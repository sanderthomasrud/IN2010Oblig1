
Input: En Node x
Output: None

Procedure push_front(x):

    if size = 0:
        first <-- x
        middle <-- first
        last <-- first
    
    if size = 1:
        first = x
        first.next = last
        last.prev = first
        middle = last
    
    else:
    first.prev = x
    x.next = first
    first = x


    left += 1
    if left - right > 1:
        middle = middle.prev

        left -= 1
        right += 1
    
    size += 1
    


Input: En Node x
Output: None

Procedure push_middle(x):

    if size = 0:
        first <-- x
        middle <-- first
        last <-- first
    
    if size = 1:
        last = x
        first.next = last
        last.prev = first
        middle = last
    
    if size = 2:
        first.next = x
        last.prev = x
        x.next = last
        x.prev = first
        middle = x

    else:
        if left = right:
            x.next = middle.next
            middle.next.prev = x
            middle.next = x
            x.prev = middle
            middle = x
            left += 1
        
        else:
            middle.prev.next = x
            x.prev = middle.prev

            middle.prev = x
            x.next = middle
            middle = x
            right += 1
    size += 1

Input: En Node x
Output: None

Procedure push_back(x):
    
    if size = 0:
        first <-- x
        middle <-- first
        last <-- first
    
    if size = 1:
        last = x
        first.next = last
        last.prev = first
        middle = last
    
    else:
        last.next = x
        x.prev = last
        last = x

        right += 1
        if right > left:
            middle = middle.next
            left += 1
            right -= 1
    size += 1


Input: En index v
Output: En Node x

Procedure get(v):
    cur = first
    if v > size:
        return None:

    for i <-- v-1 do
        cur = cur.next
    
    return cur.data
        
